<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EMConfigAPI</name>
    </assembly>
    <members>
        <member name="M:EMConfigAPI.Actions.CacheRoaming.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create cache roaming action with standard cache type
            </summary>
            <param name="applicationName"></param>
            <param name="originalLocation"></param>
            <param name="redirectLocation"></param>
            <param name="reserved"></param>
            <param name="stopIfFails"></param>
            <param name="deleteRedirectionSource"></param>
        </member>
        <member name="M:EMConfigAPI.Actions.CacheRoaming.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create cache roaming action with standard cache type (simplified)
            </summary>
            <param name="applicationName"></param>
            <param name="originalLocation"></param>
            <param name="redirectLocation"></param>
            /// <param name="deleteRedirectionSource"></param>
        </member>
        <member name="M:EMConfigAPI.Actions.CacheRoaming.SetOneDriveCacheType(System.String,System.Boolean)">
            <summary>
            Change cache type to onedrive
            </summary>
            <param name="tenantName">Name of azure tenant to form original location</param>
            <param name="autoRoamOneDriveCredentials"></param>
        </member>
        <member name="M:EMConfigAPI.Actions.CacheRoaming.SetOutlookSearchCacheType">
            <summary>
            Change cache type to OutlookSearch
            </summary>
        </member>
        <member name="M:EMConfigAPI.Actions.FileTypeAssociations.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for Uwp association
            </summary>
            <param name="uwpApplicationName">Application user name (on menu)</param>
            <param name="uwpApplicationUserModelId">User model id</param>
            <param name="extensionList"></param>
        </member>
        <member name="T:EMConfigAPI.Actions.PolicyClass">
            <summary>
            Policy type enum
            </summary>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySetADMX.#ctor(EMConfigAPI.Actions.PolicyClass,System.Boolean)">
            <summary>
            Create ADMX policy with default policy folder
            </summary>
            <param name="policyClass">Machine or User</param>
            <param name="stopIfFails">Sets/Unsets Stop if fails flag for action</param>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySetADMX.#ctor(EMConfigAPI.Actions.PolicyClass,System.String,System.Boolean)">
            <summary>
            Create ADMX policy object
            </summary>
            <param name="policyClass">Machine or User</param>
            <param name="policyFolder">Folder containing ADMX files</param>
            <param name="stopIfFails">Sets/Unsets Stop if fails flag for action</param>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySetADM.#ctor(EMConfigAPI.Actions.PolicyClass,System.Boolean)">
            <summary>
            Create ADMX policy with default policy folder
            </summary>
            <param name="policyClass">Machine or User</param>
            <param name="stopIfFails">Sets/Unsets Stop if fails flag for action</param>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySetADM.#ctor(EMConfigAPI.Actions.PolicyClass,System.String,System.Boolean)">
            <summary>
            Create ADMX policy object
            </summary>
            <param name="policyClass">Machine or User</param>
            <param name="policyFolder">Folder containing ADMX files</param>
            <param name="stopIfFails">Sets/Unsets Stop if fails flag for action</param>
        </member>
        <member name="P:EMConfigAPI.Actions.GroupPolicySet.ApplyPolicySettingsPermanently">
            <summary>
            Equivalent of "apply permanently" checkbox
            </summary>
        </member>
        <member name="P:EMConfigAPI.Actions.GroupPolicySet.PersonalizationOverride">
            <summary>
            Policy overrides personalization flag
            </summary>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySet.EnablePolicy(System.String[],System.String,System.Object[])">
            <summary>
            Enable the policy.  Category path is list of category names, policy name
            is friendly name of policy.  Objects must be provided for all additional elements
            of the policy in the order appear on the console
            Currently all names are in US English (EN_US)
            </summary>
            <param name="categoryPath">path to policy</param>
            <param name="policyName">friendly name of policy in EN_US</param>
            <param name="values">values required for policy</param>
        </member>
        <member name="M:EMConfigAPI.Actions.GroupPolicySet.DisablePolicy(System.String[],System.String)">
            <summary>
            Disable the policy.  If the policy has already been enabled on this object,
            the elements are retained and the policy is disabled.  If the policy doesn't
            exist default values are provided for elements
            </summary>
            <param name="categoryPath">path to policy</param>
            <param name="policyName">friendly name of policy in current machine language</param>
        </member>
        <member name="T:EMConfigAPI.Conditions.VDiskModes">
            <summary>
            Operating modes vDisk can be under
            </summary>
        </member>
        <member name="M:EMConfigAPI.Conditions.EnvironmentDateAndTime.SetDaysOfWeek(EMConfigAPI.Conditions.EnvironmentDateAndTime.DayOfWeek[])">
            <summary>
            Set days of week.
            </summary>
            <param name="daysOfWeek">List of days</param>
        </member>
        <member name="M:EMConfigAPI.Conditions.EnvironmentDateAndTime.SetDate(EMConfigAPI.Conditions.EnvironmentDateAndTime.When,System.DateTime)">
            <summary>
            Set a single date and condition
            </summary>
            <param name="when"></param>
            <param name="date"></param>
        </member>
        <member name="M:EMConfigAPI.Conditions.EnvironmentDateAndTime.SetBetweenDates(System.DateTime,System.DateTime)">
            <summary>
            Set a date range (between condition)
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
        </member>
        <member name="M:EMConfigAPI.Conditions.EnvironmentDateAndTime.SetTime(EMConfigAPI.Conditions.EnvironmentDateAndTime.When,System.DateTime)">
            <summary>
            Set a single time and condition
            </summary>
            <param name="when">Equal, notequal etc</param>
            <param name="date">The time</param>
        </member>
        <member name="M:EMConfigAPI.Conditions.EnvironmentDateAndTime.SetBetweenTimes(System.DateTime,System.DateTime)">
            <summary>
            Set a time range for between condition
            </summary>
            <param name="time1"></param>
            <param name="time2"></param>
        </member>
        <member name="P:EMConfigAPI.Custom.RegistryValueBase.UseDefault">
            <summary>
            Set the (Default) registry value (instead of a named value)
            </summary>
        </member>
        <member name="M:EMConfigAPI.Generic.ScheduleType.OneTimeSchedule(System.String,System.DateTime,System.Boolean,System.Boolean,System.Boolean,EMConfigAPI.Generic.ScheduleType.DelayTask,EMConfigAPI.Generic.ScheduleType.RepeatTask,EMConfigAPI.Generic.ScheduleType.DurationTask)">
            <summary>
            One time schedule method
            </summary>
            <param name="scheduleName"></param>
            <param name="startDate"></param>
            <param name="runImmediately"></param>
            <param name="delayTask"></param>
            <param name="repeatTask"></param>
            <param name="delayTaskValue"></param>
            <param name="repeatValue"></param>
            <param name="repeatDuration"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.Generic.ScheduleType.DailySchedule(System.String,System.DateTime,System.Int32,System.Boolean,System.Boolean,System.Boolean,EMConfigAPI.Generic.ScheduleType.DelayTask,EMConfigAPI.Generic.ScheduleType.RepeatTask,EMConfigAPI.Generic.ScheduleType.DurationTask)">
            <summary>
            Daily schedule method
            </summary>
            <param name="scheduleName"></param>
            <param name="startDate"></param>
            <param name="interval"></param>
            <param name="runImmediately"></param>
            <param name="delayTask"></param>
            <param name="repeatTask"></param>
            <param name="delayTaskValue"></param>
            <param name="repeatValue"></param>
            <param name="repeatDuration"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.Generic.ScheduleType.WeeklySchedule(System.String,System.DateTime,System.Int32,System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.DaysOfWeek},System.Boolean,System.Boolean,System.Boolean,EMConfigAPI.Generic.ScheduleType.DelayTask,EMConfigAPI.Generic.ScheduleType.RepeatTask,EMConfigAPI.Generic.ScheduleType.DurationTask)">
            <summary>
            Weekly schedule method
            </summary>
            <param name="scheduleName"></param>
            <param name="startDate"></param>
            <param name="interval"></param>
            <param name="daysOfWeek"></param>
            <param name="runImmediately"></param>
            <param name="delayTask"></param>
            <param name="repeatTask"></param>
            <param name="delayTaskValue"></param>
            <param name="repeatValue"></param>
            <param name="repeatDuration"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.Generic.ScheduleType.MonthlyOnDaysSchedule(System.String,System.DateTime,System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.MonthsOfYear},System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.DaysOfMonth},System.Boolean,System.Boolean,System.Boolean,EMConfigAPI.Generic.ScheduleType.DelayTask,EMConfigAPI.Generic.ScheduleType.RepeatTask,EMConfigAPI.Generic.ScheduleType.DurationTask)">
            <summary>
            Monthly (on days) schedule method
            </summary>
            <param name="scheduleName"></param>
            <param name="startDate"></param>
            <param name="monthsOfYear"></param>
            <param name="daysOfMonth"></param>
            <param name="runImmediately"></param>
            <param name="delayTask"></param>
            <param name="repeatTask"></param>
            <param name="delayTaskValue"></param>
            <param name="repeatValue"></param>
            <param name="repeatDuration"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.Generic.ScheduleType.MonthlyOnWeeksSchedule(System.String,System.DateTime,System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.MonthsOfYear},System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.WeeksOfMonth},System.Collections.Generic.List{EMConfigAPI.Generic.ScheduleType.DaysOfWeek},System.Boolean,System.Boolean,System.Boolean,EMConfigAPI.Generic.ScheduleType.DelayTask,EMConfigAPI.Generic.ScheduleType.RepeatTask,EMConfigAPI.Generic.ScheduleType.DurationTask)">
            <summary>
            Monthly (on weeks) schedule method
            </summary>
            <param name="scheduleName"></param>
            <param name="startDate"></param>
            <param name="monthsOfYear"></param>
            <param name="weeksOfMonth"></param>
            <param name="daysOfWeek"></param>
            <param name="runImmediately"></param>
            <param name="delayTask"></param>
            <param name="repeatTask"></param>
            <param name="delayTaskValue"></param>
            <param name="repeatValue"></param>
            <param name="repeatDuration"></param>
            <returns></returns>
        </member>
        <member name="T:EMConfigAPI.FileAndFolder.ExtList">
            <summary>
            List of excluded file extensions
            </summary>
        </member>
        <member name="T:EMConfigAPI.FileAndFolder.PathList">
            <summary>
            List of excluded file paths
            </summary>
        </member>
        <member name="T:EMConfigAPI.TriggerType">
            <summary>
            Trigger type enumeration
            </summary>
        </member>
        <member name="T:EMConfigAPI.EnvironmentType">
            <summary>
            Environment (pretrigger) type enumeration
            </summary>
        </member>
        <member name="T:EMConfigAPI.ConfigChangeType">
            <summary>
            Enumeration to set when to apply changes in configuration: immediately, on logon or on startup
            </summary>
        </member>
        <member name="T:EMConfigAPI.LocalAuditLogFormat">
            <summary>
            Format for local audit file
            </summary>
        </member>
        <member name="T:EMConfigAPI.EMConfiguration">
            <summary>
            Represents the .aemp file being created
            </summary>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.#ctor">
            <summary>
            Construct a new EMConfiguration object
            </summary>
        </member>
        <member name="P:EMConfigAPI.EMConfiguration.Configuration">
            <summary>
            The underlying AOM configuration object
            </summary>
        </member>
        <member name="P:EMConfigAPI.EMConfiguration.ResumeInterruptedFolderCopyItems">
            <summary>
            See DSI 204292: Resume interrupted folder copy items is labelled incorrectly in the config API
            </summary>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.NewConfig">
            <summary>
            Create a new blank configuration, overwriting existing data in the object
            </summary>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.EnableLogonSubTriggers">
            <summary>
            Enables Logon sub triggers, allowing the use of Pre-Session, Pre-Desktop, Desktop-Created triggers
            </summary>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.DisableLogonSubTriggers">
            <summary>
            Disables Logon sub triggers, this will prevent the use of Pre-Session, Pre-Desktop, Desktop-Created triggers
            </summary>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddPersonalizationServer(System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Add a personalization server to the configuration
            </summary>
            <param name="serverName">Bare server name</param>
            <param name="friendlyName">Visible name of server</param>
            <param name="https">true for https connection</param>
            <param name="port">TCP port if not default</param>
            <param name="virtualHost">Server is a virtual host (load-balancer/netscaler)</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.SetMidSessionConfigChange(EMConfigAPI.ConfigChangeType)">
            <summary>
            Set when to apply config changes
            </summary>
            <param name="changeType">Enum: Immediately, OnLogon or OnStartup  </param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.SetGlobalGroupPolicyLocation(System.String)">
            <summary>
            Set the global location for group policy actions
            </summary>
            <param name="location">Global location for group policy actions</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.SaveAsXml(System.String)">
            <summary>
            Save the xml part of the configuration only
            </summary>
            <param name="filename">Xml file to write</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.SaveConfig(System.String)">
            <summary>
            Save the current configuration to an aemp file
            </summary>
            <param name="filename">.aemp file to write</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddNodeToTrigger(EMConfigAPI.TriggerType,System.String,System.String,System.String)">
            <summary>
            Add a node to the trigger at the top level
            </summary>
            <param name="triggerType">Target trigger</param>
            <param name="name">Name of node. If blank, The Link ID is used (not recommended)</param>
            <param name="description">Description for the node</param>
            <param name="notes">Detailed notes for the node</param>
            <returns>Link ID of added node (GUID)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddScheduleNodeToTrigger(EMConfigAPI.TriggerType,UEM.ScheduledNodeObject,System.String,System.String,System.String)">
            <summary>
            Add a schedule node to the trigger at the top level
            </summary>
            <param name="triggerType">Target trigger</param>
            <param name="scheduleObject">The schedule settings that will be added to the schedule node</param>
            <param name="name">Name of node. If blank, The Link ID is used (not recommended)</param>
            <param name="description">Description for the node</param>
            <param name="notes">Detailed notes for the node</param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddNodeToParent(System.Guid,System.String,System.String,System.String)">
            <summary>
            Add node to parent node, identified by its Link ID
            </summary>
            <param name="parentId">Id of parent</param>
            <param name="name">Name for new node</param>
            <param name="description">Description for the node</param>
            <param name="notes">Detailed notes for the node</param>
            <returns>Id of new node</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddScheduleNodeToParent(System.Guid,UEM.ScheduledNodeObject,System.String,System.String,System.String)">
            <summary>
            Add schedule node to a parent node, identified by its Link ID
            </summary>
            <param name="parentId">Id of parent</param>
            <param name="scheduleObject">The schedule settings that will be added to the schedule node</param>
            <param name="name">Name for new node</param>
            <param name="description">Description for the node</param>
            <param name="notes">Detailed notes for the node</param>
            <returns>>Link ID of added node (GUID)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddActionOrCondition(System.Guid,EMConfigAPI.Generic.ActionBase)">
            <summary>
            Add an action or condition to a parent identified by id.
            Parent may be node, action or condition
            </summary>
            <param name="parentId">LinkID of parent</param>
            <param name="actionOrCondition">Action/condition to add</param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.InsertReusableNode(System.String,System.String,System.String)">
            <summary>
            Insert a reusable node into the node library
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="notes"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddReusableNodeToTrigger(EMConfigAPI.TriggerType,System.Guid)">
            <summary>
            Add a reusable node to the trigger at the top level
            </summary>
            <param name="triggerType">Target trigger</param>
            <param name="reusableNodeId">Id of reusable node.</param>
            <returns>Link ID of added node (instance of reusable node)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddReusableNode(System.Guid,System.Guid)">
            <summary>
            Add reusable node to parent node, identified by id
            </summary>
            <param name="parentId"></param>
            <param name="reusableNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.InsertReusableConditionNode(System.String,System.String,System.String)">
            <summary>
            Insert a reusable condition node into the node library
            </summary>
            <param name="name">Name of node (optional)</param>
            <param name="description"></param>
            <param name="notes"></param>
            <returns>Link ID of added reusable node</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddReusableCondition(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Add a reusable condition to parent
            </summary>
            <param name="parentId">Link ID of parent</param>
            <param name="reusableConditionId">Link ID of reusable condition</param>
            <param name="stopOnFail"></param>
            <returns></returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddEnvironmentActionOrCondition(EMConfigAPI.EnvironmentType,EMConfigAPI.Generic.ActionBase)">
            <summary>
            Add an action to a pretrigger
            </summary>
            <param name="environmentType">Identifies environment event</param>
            <param name="actionOrCondition">Action to add</param>
            <returns>Link ID of action (GUID)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.FindEntitiesByName(System.String,System.Boolean)">
            <summary>
            Find a node/nodes by name. Since the name
            does not need to be unique, returns a list
            </summary>
            <param name="name">The node or action or condition name</param>
            <param name="ignoreCase">Ignore case when matching name</param>
            <returns>List of Link IDs matching that name</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.SetRunAsUserCertificate(System.String)">
            <summary>
            Add a RunAs user certificate
            </summary>
            <param name="thumbprint">certificate thumbprint</param>
            <returns>True = Certificate OK, False = Certificate expiring</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.InsertRunAsUserLibrary(System.String,System.String,System.String)">
            <summary>
            Add entry to the RunAs user library
            </summary>
            <param name="friendlyName">Display name</param>
            <param name="userName">User to add (domain\name)</param>
            <param name="password"></param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.ImportPolicyTemplateToTrigger(EMConfigAPI.TriggerType,System.String)">
            <summary>
            Add a policy template, created by the console, to a trigger
            </summary>
            <param name="triggerType">Trigger name</param>
            <param name="templateFile">File containing template (snippet)</param>
            <returns>Link ID of top-level node added (GUID)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.ImportPolicyTemplateToNode(System.Guid,System.String)">
            <summary>
            Add a policy template, created by the console, to a specific node.
            </summary>
            <param name="parentId">Link ID of Node parent</param>
            <param name="templateFile">File containing template (snippet)</param>
            <returns>Link ID of top-level node added (GUID)</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddIfElseExpression(System.Guid,System.String,System.String)">
            <summary>
            Adds an if-else block, returning Link IDs for the expression, ifaction and elseaction.
            These Link IDs are used to add conditions and actions
            </summary>
            <param name="parentId">Id of parent node</param>
            <param name="description">Description applied to condition</param>
            <param name="ifGroupDescription">Description applied to whole group</param>
            <returns>Array of three Link IDs: 0 = expression, 1 = ifaction 2 = elseaction</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.InsertElseIf(System.Guid,System.String)">
            <summary>
            Inserts an else-if into an existing if-else group
            </summary>
            <param name="ifBlock">id of block into which the else if is to be inserted.  This must be either the initial if condition
            or an existing elseif
            </param>
            <param name="description">Description for the condition</param>
            <returns>Id of new block for adding actions</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddElseIfExpression(System.Guid,System.Guid,System.String)">
            <summary>
            Adds an else-if expression, returning the LinkID of the new expression. (backward compatibility)
            </summary>
            <param name="groupId">Id of IfElseGroup node to which this expression will be added</param>
            <param name="parentId">Id of node that will precede this expression in the IfElseGroup. This must be an IF or an ELSEIF expression</param>
            <param name="description">Description applied to condition</param>
            <returns>LinkID of the new expression</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddNodeGroupToTrigger(EMConfigAPI.TriggerType,System.String)">
            <summary>
            Adds a node group to the trigger at the top level.
            used.
            </summary>
            <param name="triggerType">target trigger</param>
            <param name="name">Name of node group. If omitted, Link ID is used (not recommended)</param>
            <returns>Link ID of added node group</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AddNodeGroupToParent(System.Guid,System.String)">
            <summary>
            Add a node group to parent node
            </summary>
            <param name="parentId">Link ID of parent</param>
            <param name="name">Name for new node group</param>
            <returns>Link ID of added node group</returns>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AuditingGeneralControl(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set general auditing parameters
            </summary>
            <param name="sendToApplicationEventLog">true/false</param>
            <param name="sendToAppSenseEventLog">true/false</param>
            <param name="makeEventsAnonymous">true/false</param>
            <param name="sendToLocalFileLog">true/false</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AuditingSetLocalLog(EMConfigAPI.LocalAuditLogFormat,System.String)">
            <summary>
            Set audit log file and format
            </summary>
            <param name="localAuditLogFormat">Format (XML/CSV)</param>
            <param name="logFileName"></param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.AuditingRaiseEventsLocally(System.Int32[])">
            <summary>
            Specify events to raise locally
            </summary>
            <param name="eventIDs">Array of event identifiers</param>
        </member>
        <member name="M:EMConfigAPI.EMConfiguration.CustomSettingAdd(System.String,System.Boolean,System.Object[])">
            <summary>
            Add a custom global setting
            </summary>
            <param name="settingName">Registry name</param>
            <param name="useDefault">if true, deletes registry value</param>
            <param name="values">value(s) to set (multiple for REG_MULTI_SZ)</param>
        </member>
    </members>
</doc>
